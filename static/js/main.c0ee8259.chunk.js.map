{"version":3,"sources":["TodoApp.jsx","index.js"],"names":["TodoApp","useState","inputText","setInputText","list","localStorage","getItem","JSON","parse","getLocalStorage","listItems","setlistItems","isEditableItem","setisEditableItem","editCondition","seteditCondition","addItem","map","curElem","id","name","find","item","alert","newInputData","Date","getTime","toString","useEffect","setItem","stringify","className","type","placeholder","value","onChange","e","target","onClick","itemToEdit","editItem","updatedList","filter","deleteItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4KAsHeA,EA3GC,WACd,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,mBAXZ,WACtB,IAAMG,EAAOC,aAAaC,QAAQ,YAClC,OAAIF,EACKG,KAAKC,MAAMJ,GAEX,GAMkCK,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4CV,mBAAS,IAArD,mBAAOW,EAAP,KAAuBC,EAAvB,KACA,EAA0CZ,oBAAS,GAAnD,mBAAOa,EAAP,KAAsBC,EAAtB,KAEMC,EAAU,WACd,GAAKd,EAEE,GAAIA,GAAaY,EACtBH,EACED,EAAUO,KAAI,SAACC,GACb,OAAIA,EAAQC,KAAOP,EACV,2BAAKM,GAAZ,IAAqBE,KAAMlB,IAEtBgB,MAGXf,EAAa,IACbU,EAAkB,MAClBE,GAAiB,OACZ,CAOL,IANkBL,EAAUW,MAAK,SAACC,GAChC,GAAIA,EAAKF,MAAQlB,EAEf,OADAqB,MAAM,SAAD,OAAUrB,EAAV,uBACE,KAGK,CACd,IAAMsB,EAAe,CACnBL,IAAI,IAAIM,MAAOC,UAAUC,WACzBP,KAAMlB,GAERS,EAAa,GAAD,mBAAKD,GAAL,CAAgBc,KAC5BrB,EAAa,UA1BfoB,MAAM,wCAmDV,OAJAK,qBAAU,WACRvB,aAAawB,QAAQ,WAAYtB,KAAKuB,UAAUpB,MAC/C,CAACA,IAGF,mCACE,sBAAKqB,UAAU,YAAf,UACE,mCACE,qBAAKA,UAAU,WAAf,0BACA,sEAEF,sBAAKA,UAAU,UAAf,UACE,uBACEC,KAAK,OACLD,UAAU,eACVE,YAAY,qBACZC,MAAOhC,EACPiC,SAAU,SAACC,GAAD,OAAOjC,EAAaiC,EAAEC,OAAOH,UAEvCpB,EAGA,mBAAGiB,UAAU,cAAcO,QAAStB,IAFpC,mBAAGe,UAAU,sBAAsBO,QAAStB,OAKhD,qBAAKe,UAAU,OAAf,SACGrB,EAAUO,KAAI,SAACK,GACd,OACE,sBAAKS,UAAU,YAAf,UACE,6BAAKT,EAAKF,OACV,sBAAKW,UAAU,YAAf,UACE,mBACEA,UAAU,cACVO,QAAS,kBA1CV,SAACnB,GAChB,IAAMoB,EAAa7B,EAAUW,MAAK,SAACH,GACjC,OAAOA,EAAQC,KAAOA,KAExBhB,EAAaoC,EAAWnB,MACxBP,EAAkB0B,EAAWpB,IAC7BJ,GAAiB,GAoCcyB,CAASlB,EAAKH,OAE/B,mBACEY,UAAU,mBACVO,QAAS,kBArDR,SAACnB,GAClB,IAAMsB,EAAc/B,EAAUgC,QAAO,SAACpB,GACpC,QAASA,EAAKH,KAAOA,MAEvBR,EAAa8B,GAiDkBE,CAAWrB,EAAKH,YATLG,EAAKH,SAgB3C,wBAAQY,UAAU,mBAAmBO,QAAS,kBAAM3B,EAAa,KAAjE,8BC1GRiC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c0ee8259.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst getLocalStorage = () => {\n  const list = localStorage.getItem(\"todolist\");\n  if (list) {\n    return JSON.parse(list);\n  } else {\n    return [];\n  }\n};\n\nconst TodoApp = () => {\n  const [inputText, setInputText] = useState(\"\");\n  const [listItems, setlistItems] = useState(getLocalStorage());\n  const [isEditableItem, setisEditableItem] = useState(\"\");\n  const [editCondition, seteditCondition] = useState(false);\n\n  const addItem = () => {\n    if (!inputText) {\n      alert(\"please input data to insert in list\");\n    } else if (inputText && editCondition) {\n      setlistItems(\n        listItems.map((curElem) => {\n          if (curElem.id === isEditableItem) {\n            return { ...curElem, name: inputText };\n          }\n          return curElem;\n        })\n      );\n      setInputText(\"\");\n      setisEditableItem(null);\n      seteditCondition(false);\n    } else {\n      const condition = listItems.find((item) => {\n        if (item.name == inputText) {\n          alert(`item \"${inputText}\" already exists.`);\n          return true;\n        }\n      });\n      if (!condition) {\n        const newInputData = {\n          id: new Date().getTime().toString(),\n          name: inputText,\n        };\n        setlistItems([...listItems, newInputData]);\n        setInputText(\"\");\n      }\n    }\n  };\n\n  const deleteItem = (id) => {\n    const updatedList = listItems.filter((item) => {\n      return !(item.id === id);\n    });\n    setlistItems(updatedList);\n  };\n\n  const editItem = (id) => {\n    const itemToEdit = listItems.find((curElem) => {\n      return curElem.id === id;\n    });\n    setInputText(itemToEdit.name);\n    setisEditableItem(itemToEdit.id);\n    seteditCondition(true);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"todolist\", JSON.stringify(listItems));\n  }, [listItems]);\n\n  return (\n    <>\n      <div className=\"container\">\n        <figure>\n          <div className=\"note_img\">üìù</div>\n          <figcaption>Add Your List Here ‚úå</figcaption>\n        </figure>\n        <div className=\"additem\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"‚úç to add item\"\n            value={inputText}\n            onChange={(e) => setInputText(e.target.value)}\n          />\n          {!editCondition ? (\n            <i className=\"fas fa-plus add_btn\" onClick={addItem}></i>\n          ) : (\n            <i className=\"far fa-edit\" onClick={addItem}></i>\n          )}\n        </div>\n        <div className=\"list\">\n          {listItems.map((item) => {\n            return (\n              <div className=\"list_item\" key={item.id}>\n                <h3>{item.name}</h3>\n                <div className=\"todo_btns\">\n                  <i\n                    className=\"far fa-edit\"\n                    onClick={() => editItem(item.id)}\n                  ></i>\n                  <i\n                    className=\"far fa-trash-alt\"\n                    onClick={() => deleteItem(item.id)}\n                  ></i>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <button className=\"romove_all_items\" onClick={() => setlistItems([])}>\n          Remove All\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoApp from './TodoApp.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}